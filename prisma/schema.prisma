// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

enum UserRole {
  JOBSEEKER
  EMPLOYER
  ADMIN
}

enum JobType {
  FULL_TIME
  PART_TIME
  CONTRACT
  INTERNSHIP
  FREELANCE
}

enum ApplicationStatus {
  PENDING
  REVIEWING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

model User {
  id            String        @id @default(cuid())
  name          String
  email         String        @unique
  password      String
  profileImage  String?
  bio           String?
  role          UserRole      @default(JOBSEEKER)
  phone         String?
  location      String?
  experience    Int?          // Years of experience
  skills        Skill[]       // Many-to-many relation with skills
  education     Education[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  jobs          Job[]         @relation("EmployerJobs")
  applications  Application[] @relation("UserApplications")
}

model Job {
  id             String        @id @default(cuid())
  title          String
  description    String
  companyName    String
  location       String
  salary         String?
  requirements   String?
  type           JobType       @default(FULL_TIME)
  experienceLevel String?      // e.g., "Entry Level", "Senior", etc.
  employerId     String
  employer       User          @relation("EmployerJobs", fields: [employerId], references: [id])
  category       Category      @relation(fields: [categoryId], references: [id])
  categoryId     String
  skills         Skill[]       // Required skills for the job
  applications   Application[] @relation("JobApplications")
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  expiresAt      DateTime?     // Job posting expiration date
  isActive       Boolean       @default(true)

  @@index([employerId])
  @@index([categoryId])
}

model Application {
  id          String            @id @default(cuid())
  coverLetter String?
  resume      String?
  status      ApplicationStatus @default(PENDING)
  userId      String
  user        User              @relation("UserApplications", fields: [userId], references: [id])
  jobId       String
  job         Job               @relation("JobApplications", fields: [jobId], references: [id])
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  notes       String?           // Internal notes for employers

  @@index([userId])
  @@index([jobId])
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  jobs        Job[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skill {
  id          String   @id @default(cuid())
  name        String   @unique
  users       User[]   // Users who have this skill
  jobs        Job[]    // Jobs that require this skill
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Education {
  id          String   @id @default(cuid())
  institution String
  degree      String
  field       String
  startDate   DateTime
  endDate     DateTime?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
}
